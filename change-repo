#!/bin/bash
###
# @Author: timochan
# @Date: 2023-10-13 17:28:01
# @LastEditors: timochan
# @LastEditTime: 2023-10-13 20:13:44
# @FilePath: /change-repo/change-repo
###
API_DONAME="api.miaoer.xyz"
API_URL="https://${API_DONAME}/api/v2/snippets/catwrt/repo"
MIRROR_FILE="/etc/opkg/distfeeds.conf"
VERSION_FILE="/etc/catwrt_release"

local_error() {
    echo "Local $1 get failed, please check your /etc/catwrt_release!"
    exit 1
}
init() {
    if [ ! -f ${VERSION_FILE} ]; then
        local_error "version file"
    fi
    arch_local=$(grep 'arch' ${VERSION_FILE} | cut -d '=' -f 2)
    version_local=$(grep 'version' ${VERSION_FILE} | cut -d '=' -f 2)
    hash_local=$(grep 'hash' ${VERSION_FILE} | cut -d '=' -f 2)

}
ping_test() {
    ping -c 1 ${API_DONAME} >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Error: Unable to connect to API server. Please check your network."
        exit 1
    fi

}
backup_file() {
    if [ -f ${MIRROR_FILE} ]; then
        mv ${MIRROR_FILE} ${MIRROR_FILE}.bak
        echo "Backup ${MIRROR_FILE} to ${MIRROR_FILE}.bak"
    fi
}
test_mirror() {
    arch_self=$1
    version_remote=$(curl ${API_URL} | jq -r ".$arch_self.version")
    hash_remote=$(curl ${API_URL} | jq -r ".$arch_self.hash")

    if [ $? -ne 0 ] || [ -z "$version_remote" ] || [ -z "$hash_remote" ]; then
        remote_error "version or hash"
    fi
}

speedtest_mirror() {
    domains=($(curl -s ${API_URL} | jq -r '.server | to_entries[] | .value | select(startswith("https"))' | awk -F/ '{print $3}'))
    fastest_response=999999
    fastest_domain=""
    port=443

    for domain in "${domains[@]}"; do
        response_time=$(tcping -c 1 $domain $port | grep -oP "(\d+\.\d+)")
        response_time=$(awk -v n=$response_time 'BEGIN { printf "%.2f", n }')
        fastest_response=$(awk -v n=$fastest_response 'BEGIN { printf "%.2f", n }')
        if [ $(echo "${response_time} < ${fastest_response}" | bc -l) -eq 1 ]; then
            fastest_response=${response_time}
            fastest_domain=${domain}
        fi

    done

    echo "Fast Mirror is: ${fastest_domain}"
    echo "Response Time: ${fastest_response} ms"

}
replace_mirror() {
    mirror_url="https://${fastest_domain}"
    cat >"$MIRROR_FILE" <<EOF
    src/gz openwrt_core ${mirror_url}/${arch_self}/openwrt_core
    src/gz openwrt_base ${mirror_url}/${arch_self}/openwrt_base
    src/gz openwrt_luci ${mirror_url}/${arch_self}/openwrt_luci
    src/gz openwrt_packages ${mirror_url}/${arch_self}/openwrt_packages
    src/gz openwrt_routing ${mirror_url}/${arch_self}/openwrt_routing
    src/gz openwrt_telephony ${mirror_url}/${arch_self}/openwrt_telephony
EOF

}
update() {
    rm -f /var/lock/opkg.lock
    opkg update

}
main() {
    init
    ping_test
    test_mirror $arch_local
    speedtest_mirror
    backup_file
    replace_mirror
    update

}
main
